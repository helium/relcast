-module(handler1).

%-behavior(relcast).

-export([
         init/1,
         handle_command/2,
         handle_message/3,
         callback_message/3,
         serialize/1,
         deserialize/1,
         restore/2
        ]).

-record(state, {
                a :: atom(),
                b :: atom(),
                c :: atom(),
                d :: #{},
                e :: atom(),
                f :: atom(),
                g :: atom()
               }).

-record(dstate, {
                 a :: atom(),
                 b :: atom(),
                 c :: atom()
                }).

init([]) ->
    {ok, #state{}}.

handle_command(populate5, State) ->
    {reply, ok, [], State#state{a=a4, b=b4, c=c4, d=#dstate{a=d4a, b=d4b, c=d4c},
                                e=e4, f=f4, g=g4}};
handle_command(get, State) ->
    {reply, State, [], State};
handle_command(Msg, _State) ->
    io:format("handle_call, Msg: ~p", [Msg]),
    {reply, ok, ignore}.

handle_message(Msg, Actor, State) ->
    cthr:pal("handle_message, Msg: ~p, Actor: ~p~n", [Msg, Actor]),
    {State, []}.

callback_message(_, _, _) ->
    ignore.

serialize(State) ->
    cthr:pal("Serialize d: ~p~n", [State]),
    term_to_binary(State).

deser_d(D) when is_binary(D) ->
    cthr:pal("got binary ~p", [D]),
    D1 = binary_to_term(D),
    #dstate{a = D1, b = D1, c = D1};
deser_d(#{a := A,
          b := B,
          c := C} = D) ->
    cthr:pal("got map ~p", [D]),
    #dstate{a = binary_to_term(A),
            b = binary_to_term(B),
            c = binary_to_term(C)}.

deserialize(B) when is_binary(B) ->
    cthr:pal("Deserialize d bin: ~p~n", [B]),
    binary_to_term(B);
deserialize(M) ->
    cthr:pal("Deserialize d map: ~p~n", [M]),
    M1 = maps:map(fun(d, V) -> deser_d(V);
                     (_K, V) -> binary_to_term(V) end, M),
    case M1 of
        #{a := A,
          b := B,
          c := C,
          d := D,
          e := E,
          f := F,
          g := G} ->
            #state{a = A,
                   b = B,
                   c = C,
                   d = D,
                   e = E,
                   f = F,
                   g = G};
        #{a := A,
          b := B,
          c := C,
          d := D,
          e := E} ->
            #state{a = A,
                   b = B,
                   c = C,
                   d = D,
                   e = E}
    end.

restore(OldState, NewState) ->
    cthr:pal("b OldState: ~p, NewState: ~p~n", [OldState, NewState]),
    {ok, OldState}.
